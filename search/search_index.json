{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PySauron in a nutshell \u00a4","title":"Home"},{"location":"#pysauron-in-a-nutshell","text":"","title":"PySauron in a nutshell"},{"location":"examples/avenue/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); import sys sys . path . append ( '..' ) from pysauron.datasets import Avenue from pysauron.transforms import RandomAnomalyInject , ChangeDirection , FrameDrop import matplotlib.pyplot as plt from IPython.display import clear_output train_dataset = Avenue ( root = '../data/AvenueDataset/' , test_mode = False , _debug = True ) test_dataset = Avenue ( root = '../data/AvenueDataset/' , test_mode = True , _debug = True ) 100.0% 100.0% print ( '# Train samples: ' , len ( train_dataset )) print ( '# Test samples: ' , len ( test_dataset )) # Train samples: 2845 # Test samples: 2620 sample = test_dataset [ 75 ] for i in range ( sample [ 0 ] . shape [ 0 ]): plt . imshow ( sample [ 0 ][ i ]) plt . imshow ( sample [ 1 ][ i ], alpha = 0.5 ) plt . title ( f 'Label: { sample [ 2 ][ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels: ' , sample [ 2 ]) Sample temporal labels: [0. 0. 1. 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0.] Frame drop augmentation \u00a4 sample = test_dataset [ 75 ] video , label , temporal_l = FrameDrop ( k = 9 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . imshow ( label [ i ], alpha = 0.5 ) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 0. 1. 0.] Direction change augmentation \u00a4 sample = test_dataset [ 75 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . imshow ( label [ i ], alpha = 0.5 ) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 1. 0. 0.] Randomg injection augmentation \u00a4 sample = test_dataset [ 75 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . imshow ( label [ i ], alpha = 0.5 ) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"Avenue"},{"location":"examples/avenue/#frame-drop-augmentation","text":"sample = test_dataset [ 75 ] video , label , temporal_l = FrameDrop ( k = 9 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . imshow ( label [ i ], alpha = 0.5 ) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 0. 1. 0.]","title":"Frame drop augmentation"},{"location":"examples/avenue/#direction-change-augmentation","text":"sample = test_dataset [ 75 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . imshow ( label [ i ], alpha = 0.5 ) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 1. 1. 1. 1. 0. 0.]","title":"Direction change augmentation"},{"location":"examples/avenue/#randomg-injection-augmentation","text":"sample = test_dataset [ 75 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . imshow ( label [ i ], alpha = 0.5 ) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"Randomg injection augmentation"},{"location":"examples/shanghaitech/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); import sys sys . path . append ( '..' ) from pysauron.datasets import ShanghaiTech from pysauron.transforms import RandomAnomalyInject , ChangeDirection , FrameDrop import matplotlib.pyplot as plt from IPython.display import clear_output train_dataset = ShanghaiTech ( root = '../data/ShanghaiTech/' , test_mode = False , _debug = True ) test_dataset = ShanghaiTech ( root = '../data/ShanghaiTech/' , test_mode = True , _debug = True ) 100.0% print ( '# Train samples: ' , len ( train_dataset )) print ( '# Test samples: ' , len ( test_dataset )) # Train samples: 1215 # Test samples: 249 sample = test_dataset [ 125 ] for i in range ( sample [ 0 ] . shape [ 0 ]): plt . imshow ( sample [ 0 ][ i ]) plt . title ( f 'Label: { sample [ 2 ][ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels: ' , sample [ 2 ]) Sample temporal labels: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] Frame drop augmentation \u00a4 sample = test_dataset [ 125 ] video , label , temporal_l = FrameDrop ( k = 5 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0] Direction change augmentation \u00a4 sample = test_dataset [ 125 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1] Randomg injection augmentation \u00a4 sample = test_dataset [ 125 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]","title":"ShanghaiTech"},{"location":"examples/shanghaitech/#frame-drop-augmentation","text":"sample = test_dataset [ 125 ] video , label , temporal_l = FrameDrop ( k = 5 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0]","title":"Frame drop augmentation"},{"location":"examples/shanghaitech/#direction-change-augmentation","text":"sample = test_dataset [ 125 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1]","title":"Direction change augmentation"},{"location":"examples/shanghaitech/#randomg-injection-augmentation","text":"sample = test_dataset [ 125 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]","title":"Randomg injection augmentation"},{"location":"examples/ucf_crime/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); import sys sys . path . append ( '..' ) from pysauron.datasets import UCFCrime from pysauron.transforms import RandomAnomalyInject , ChangeDirection , FrameDrop import matplotlib.pyplot as plt from IPython.display import clear_output train_dataset = UCFCrime ( root = '../data/UCF-Crime/' , test_mode = False , _debug = True ) test_dataset = UCFCrime ( root = '../data/UCF-Crime/' , test_mode = True , _debug = True ) 100.0% 100.0% print ( '# Train samples: ' , len ( train_dataset )) print ( '# Test samples: ' , len ( test_dataset )) # Train samples: 3564 # Test samples: 2926 Frame drop augmentation \u00a4 sample = test_dataset [ 180 ] video , label , temporal_l = FrameDrop ( k = 5 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] Direction change augmentation \u00a4 sample = test_dataset [ 180 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] Randomg injection augmentation \u00a4 sample = test_dataset [ 180 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"UCF-Crime"},{"location":"examples/ucf_crime/#frame-drop-augmentation","text":"sample = test_dataset [ 180 ] video , label , temporal_l = FrameDrop ( k = 5 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"Frame drop augmentation"},{"location":"examples/ucf_crime/#direction-change-augmentation","text":"sample = test_dataset [ 180 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"Direction change augmentation"},{"location":"examples/ucf_crime/#randomg-injection-augmentation","text":"sample = test_dataset [ 180 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"Randomg injection augmentation"},{"location":"examples/xd_violence/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); import sys sys . path . append ( '..' ) from pysauron.datasets import XDViolence from pysauron.transforms import RandomAnomalyInject , ChangeDirection , FrameDrop import matplotlib.pyplot as plt from IPython.display import clear_output train_dataset = XDViolence ( root = '../data/XD-Violence/' , test_mode = False , _debug = True ) test_dataset = XDViolence ( root = '../data/XD-Violence/' , test_mode = True , _debug = True ) 100.0% 100.0% print ( '# Train samples: ' , len ( train_dataset )) print ( '# Test samples: ' , len ( test_dataset )) # Train samples: 15658 # Test samples: 4899 Frame drop augmentation \u00a4 sample = test_dataset [ 243 ] video , label , temporal_l = FrameDrop ( k = 5 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 0. 1. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0.] Direction change augmentation \u00a4 sample = test_dataset [ 243 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.] Randomg injection augmentation \u00a4 sample = test_dataset [ 243 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"XD-Violence"},{"location":"examples/xd_violence/#frame-drop-augmentation","text":"sample = test_dataset [ 243 ] video , label , temporal_l = FrameDrop ( k = 5 , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 0. 1. 1. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0.]","title":"Frame drop augmentation"},{"location":"examples/xd_violence/#direction-change-augmentation","text":"sample = test_dataset [ 243 ] video , label , temporal_l = ChangeDirection ( always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]","title":"Direction change augmentation"},{"location":"examples/xd_violence/#randomg-injection-augmentation","text":"sample = test_dataset [ 243 ] video , label , temporal_l = RandomAnomalyInject ( anomaly_folder = '/Users/bogdanivanyuk/Desktop/PySauron/pysauron/transforms/assets/anomalies/animals' , always_apply = True )( video = sample [ 0 ], label = sample [ 1 ], temporal_label = sample [ 2 ]) for i in range ( video . shape [ 0 ]): plt . imshow ( video [ i ]) plt . title ( f 'Label: { temporal_l [ i ] } ' ) clear_output ( True ) plt . show () print ( 'Sample temporal labels after transform: ' , temporal_l ) Sample temporal labels after transform: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]","title":"Randomg injection augmentation"}]}